---
title: "Credential management"
---

In any project you are likely to need to use secrets of some sort, e.g. credentials for accessing a database, or maybe an API key. This section will help you make sure your secrets stay secret.

The examples below show in detail how you could use secrets in an R script or in Python. In R, we use a file called `.Renviron`, and no special library is used to load it. In Python, we use a file called `.env`, and use the `dotenv` library to load credentials from there.

**Whatever you do, whether you use `.Renviron`, `.env`, a config file or something else entirely: as soon as you have created your secrets file, add it to `.gitignore`!**

One key advantage of using an established method for saving secrets rather than calling the file something totally random is that the basic `.gitignore` template in your repo will already contain things like `.env`.

In both R and Python, we prefer having a secrets file where we keep credentials, and a separate config file that can be used for managing other environment variables e.g. the SQL drivers needed for running an app locally vs. on a host, and lists of dev and prod tables. This means you can commit the config file so that when it comes to switching between environments, it's easy to make sure everyone is literally on the same page.

::: panel-tabset
#### R

In R, the standard way to manage secrets is with a `.Renviron` file. Create this file at the root of your repository. Populate it with credentials like so:

``` r
DATABASE_SERVER = "name-of-your-server.database.windows.net"
DATABASE_NAME = "database"
DATABASE_USERNAME = "username"
DATABASE_PASSWORD = "strongpassword"
```
Note that it is conventional to give environment variables in all caps.

To access these credentials in your script, you first need to access the `.Renviron` file, then access the credentials using `Sys.getenv()`. For example, to establish a connection to a database, insert the following lines into your Rscript:

``` r
readRenviron(".Renviron")
database_conn <- DBI::dbConnect(odbc::odbc(),
                            Driver = "ODBC Driver 17 for SQL Server",
                            Database = Sys.getenv("DATABASE_NAME"),
                            Server = Sys.getenv("DATABASE_SERVER"),
                            UID = Sys.getenv("DATABASE_USERNAME"),
                            PWD = Sys.getenv("DATABASE_PASSWORD"),
                            port = 1433,
                            encoding = "latin1",
                            timeout = 60)
```
You could also choose to store secrets in your `config.yml` file and access them with `config::get()`. However, we prefer not to do this simply because we use the config file for storing non-secret environment variables like the names of dev and prod tables. We then commit `config.yml` to Github.

#### Python


In Python, create a file called `.env` at the root of your repository. Populate it with credentials like so:

``` python
DATABASE_SERVER = "name-of-your-server.database.windows.net"
DATABASE_NAME = "database"
DATABASE_USERNAME = "username"
DATABASE_PASSWORD = "strongpassword"
```
Note that it is conventional to give environment variables in all caps.

Example code for accessing your secrets is given below. It does the following:

1. Loads `sqlalchemy` for connecting to a database, `os` for building filepaths and `dotenv` for accessing the `.env` file you created at the previous step

2. Uses an if statement to check for a `.env` file - this becomes important when we start trying to integrate Python scripts with Github Actions, which we'll come onto below

3. Uses `os.environ.get(...)` to access secrets

4. Pastes these into a connection string and opens a connection to a database

``` python
from sqlalchemy import create_engine
import os # this library is for concatenating file paths and allowing you to navigate your project
from dotenv import load_dotenv # this is for credential management

if os.path.exists(".env"):
    load_dotenv() # load secrets if they are available

server = os.environ.get("DATABASE_SERVER")
db = os.environ.get("DATABASE_NAME")
user = os.environ.get("DATABASE_USERNAME")
password = os.environ.get("DATABASE_PASSWORD")

connection_string ='Driver={SQL Server};'\
                        f'Server={server};'\
                        f'Database={db};'\
                        f'UID={user};'\
                        f'PWD={password}'
                        
channel = connection_string

# Parse URL and fix quotes with UTF.
quoted = quote_plus(channel)

# Add driver name to connection string 
new_con = 'mssql+pyodbc:///?odbc_connect={}'.format(quoted)

# Use sqlalchemy's create engine function.
engine = create_engine(new_con)

```


:::

# Integration with Github

NB this section is about deploying a Python script with Github Actions.

* Navigate to your repository on github.com and navigate to **Settings** along the top.

* In the lefthand menu, under **Security**, find **Secrets and variables** and then under that **Actions**.

* For GHA, what you need are **Repository secrets**. There should be a big green button inviting you to add **New repository secret** and a list below of all the ones you already have.

* Any environment variables that you have in `.env`, add them here as repository secrets. Call them exactly the same name e.g. if you have an environment variable called 'BLOB_ACCOUNT' in the `.env` file, add a repository secret called 'BLOB_ACCOUNT' not 'blob_account' or 'blob_acct'.

That's all you have to do. When your Python script executes on GHA, the conditional `if os.path.exists(".env"): ...` means that if the script is running locally, it will find a `.env` file and get secrets from there; if the script is running on Github, it won't find a `.env` file and instead will default to getting the credentials from your repository secrets.


# Other ways to manage secrets

::: panel-tabset
#### R

[Here](https://cran.r-project.org/web/packages/httr/vignettes/secrets.html) is a whole article covering various options e.g. the `keyring` package.

#### Python

* [decouple](https://pypi.org/project/python-decouple/)

* I have seen [this tutorial](https://codingnomads.co/blog/python-environment-variables-set-a-variable-in-bash/#using-environment-variables-in-python) that recommends creating a virtual environment with `venv` and adding secrets to the activation script, so that they're available when you start the virtual environment and disappear as soon as it is deactivated.

:::
